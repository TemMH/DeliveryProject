generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model carts {
  id         Int      @id @default(autoincrement())
  quantity   Int
  price      Int
  created_at DateTime @default(now())
  userId     Int
  productId  Int
  products   products @relation(fields: [productId], references: [id])
  users      users    @relation(fields: [userId], references: [id])
}

model categories {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique
  product_has_categories product_has_categories[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String
  options        String?
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement())
  queue        String @db.VarChar(255)
  payload      String
  attempts     Int    @db.SmallInt
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int
}

model order_items {
  id        Int      @id @default(autoincrement())
  quantity  Int
  orderId   Int
  productId Int
  orders    orders   @relation(fields: [orderId], references: [id])
  products  products @relation(fields: [productId], references: [id])
}

model orders {
  id           Int           @id @default(autoincrement())
  total_price  Int
  created_at   DateTime      @default(now())
  delivered_at DateTime?
  status       status        @default(PENDING)
  userId       Int
  order_items  order_items[]
  users        users         @relation(fields: [userId], references: [id])
}

model product_has_categories {
  id         Int        @id @default(autoincrement())
  productId  Int
  categoryId Int
  categories categories @relation(fields: [categoryId], references: [id])
  products   products   @relation(fields: [productId], references: [id])
}

model products {
  id                     Int                      @id @default(autoincrement())
  name                   String
  description            String
  price                  String
  image_path             String?
  created_at             DateTime                 @default(now())
  updated_at             DateTime?
  stock                  Int
  carts                  carts[]
  order_items            order_items[]
  product_has_categories product_has_categories[]
  reviews                reviews[]
  wishlist               wishlist[]
}

model reviews {
  id         Int      @id @default(autoincrement())
  rating     Int
  text       String
  created_at DateTime @default(now())
  userId     Int
  productId  Int
  products   products @relation(fields: [productId], references: [id])
  users      users    @relation(fields: [userId], references: [id])
}

model roles {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  users users[]
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt?
  ip_address    String? @db.VarChar(45)
  user_agent    String?
  payload       String
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model users {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  name          String?
  surname       String?
  patronymic    String?
  date_of_birth DateTime?
  password      String
  address       String?
  phone_number  String     @unique
  createdAt     DateTime   @default(now())
  roleId        Int        @default(1)
  carts         carts[]
  orders        orders[]
  reviews       reviews[]
  roles         roles      @relation(fields: [roleId], references: [id])
  wishlist      wishlist[]
}

model wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  products  products @relation(fields: [productId], references: [id])
  users     users    @relation(fields: [userId], references: [id])
}

enum status {
  PENDING
  COMPLETED
  CANCELED
}
